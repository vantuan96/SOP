//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SOPEntities : DbContext
    {
        public SOPEntities()
            : base("name=SOPEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessHistory> AccessHistories { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentFieldOperation> DepartmentFieldOperations { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Ethnic> Ethnics { get; set; }
        public virtual DbSet<FieldOperation> FieldOperations { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<HistoricalWork> HistoricalWorks { get; set; }
        public virtual DbSet<Opinion> Opinions { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<RatingResult> RatingResults { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserFieldOperation> UserFieldOperations { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
    
        public virtual ObjectResult<SOP_GetCompareTwoOrganizationRating_Result> SOP_GetCompareTwoOrganizationRating(Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime, Nullable<int> organizationId1, Nullable<int> organizationId2)
        {
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.DateTime));
    
            var organizationId1Parameter = organizationId1.HasValue ?
                new ObjectParameter("OrganizationId1", organizationId1) :
                new ObjectParameter("OrganizationId1", typeof(int));
    
            var organizationId2Parameter = organizationId2.HasValue ?
                new ObjectParameter("OrganizationId2", organizationId2) :
                new ObjectParameter("OrganizationId2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetCompareTwoOrganizationRating_Result>("SOP_GetCompareTwoOrganizationRating", fromTimeParameter, toTimeParameter, organizationId1Parameter, organizationId2Parameter);
        }
    
        public virtual ObjectResult<SOP_GetDetailFieldOperationRating_Result> SOP_GetDetailFieldOperationRating(Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime, Nullable<int> fieldOperationId)
        {
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.DateTime));
    
            var fieldOperationIdParameter = fieldOperationId.HasValue ?
                new ObjectParameter("FieldOperationId", fieldOperationId) :
                new ObjectParameter("FieldOperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetDetailFieldOperationRating_Result>("SOP_GetDetailFieldOperationRating", fromTimeParameter, toTimeParameter, fieldOperationIdParameter);
        }
    
        public virtual ObjectResult<SOP_GetListFieldOperationRating_Result> SOP_GetListFieldOperationRating(Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime)
        {
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetListFieldOperationRating_Result>("SOP_GetListFieldOperationRating", fromTimeParameter, toTimeParameter);
        }
    
        public virtual ObjectResult<SOP_GetListOrganizationRating_Result> SOP_GetListOrganizationRating(Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime)
        {
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetListOrganizationRating_Result>("SOP_GetListOrganizationRating", fromTimeParameter, toTimeParameter);
        }
    
        public virtual ObjectResult<SOP_GetMCompareRating_Result> SOP_GetMCompareRating(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetMCompareRating_Result>("SOP_GetMCompareRating", userIdParameter);
        }
    
        public virtual ObjectResult<SOP_GetMCompareRating_ByYear_Result> SOP_GetMCompareRating_ByYear(Nullable<int> year, Nullable<int> userId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetMCompareRating_ByYear_Result>("SOP_GetMCompareRating_ByYear", yearParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SOP_GetStatusUserCMMC_Result> SOP_GetStatusUserCMMC()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetStatusUserCMMC_Result>("SOP_GetStatusUserCMMC");
        }
    
        public virtual ObjectResult<SOP_GetStatusUserCMMCByOrganization_Result> SOP_GetStatusUserCMMCByOrganization(Nullable<int> organization_Id)
        {
            var organization_IdParameter = organization_Id.HasValue ?
                new ObjectParameter("Organization_Id", organization_Id) :
                new ObjectParameter("Organization_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetStatusUserCMMCByOrganization_Result>("SOP_GetStatusUserCMMCByOrganization", organization_IdParameter);
        }
    
        public virtual ObjectResult<SOP_GetYCompareFieldOperationRating_Result> SOP_GetYCompareFieldOperationRating(Nullable<int> fieldOperationId)
        {
            var fieldOperationIdParameter = fieldOperationId.HasValue ?
                new ObjectParameter("FieldOperationId", fieldOperationId) :
                new ObjectParameter("FieldOperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetYCompareFieldOperationRating_Result>("SOP_GetYCompareFieldOperationRating", fieldOperationIdParameter);
        }
    
        public virtual ObjectResult<SOP_GetYCompareOrganizationRating_Result> SOP_GetYCompareOrganizationRating(Nullable<int> organizationId)
        {
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetYCompareOrganizationRating_Result>("SOP_GetYCompareOrganizationRating", organizationIdParameter);
        }
    
        public virtual ObjectResult<SOP_GetYFieldOperationRating_ByYear_Result> SOP_GetYFieldOperationRating_ByYear(Nullable<int> year, Nullable<int> fieldOperationId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var fieldOperationIdParameter = fieldOperationId.HasValue ?
                new ObjectParameter("FieldOperationId", fieldOperationId) :
                new ObjectParameter("FieldOperationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetYFieldOperationRating_ByYear_Result>("SOP_GetYFieldOperationRating_ByYear", yearParameter, fieldOperationIdParameter);
        }
    
        public virtual ObjectResult<SOP_GetYOrganizationRating_ByYear_Result> SOP_GetYOrganizationRating_ByYear(Nullable<int> year, Nullable<int> organizationId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetYOrganizationRating_ByYear_Result>("SOP_GetYOrganizationRating_ByYear", yearParameter, organizationIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<string> sp_generate_inserts(string table_name, string target_table, Nullable<bool> include_column_list, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string owner, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var include_column_listParameter = include_column_list.HasValue ?
                new ObjectParameter("include_column_list", include_column_list) :
                new ObjectParameter("include_column_list", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_generate_inserts", table_nameParameter, target_tableParameter, include_column_listParameter, fromParameter, include_timestampParameter, debug_modeParameter, ownerParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, disable_constraintsParameter, ommit_computed_colsParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SOP_GetDetailOrganizationRating_Result1> SOP_GetDetailOrganizationRating(Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime, Nullable<int> organizationId)
        {
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.DateTime));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_GetDetailOrganizationRating_Result1>("SOP_GetDetailOrganizationRating", fromTimeParameter, toTimeParameter, organizationIdParameter);
        }
    
        public virtual int SOP_UpdateStatusUserCMMC(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SOP_UpdateStatusUserCMMC", userIdParameter);
        }
    }
}
